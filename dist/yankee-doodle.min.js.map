{"version":3,"sources":["src/parse.js","src/filters.js","src/serialise.js","src/yank.js","index.js"],"names":["Parser","schema","keys","RegExp","tokens","OPEN","scopes","CLOSE","flags","joined","Object","values","FLAGS","map","i","join","strip","split","reg","tokenise","length","next","tree","shift","token","DIV","key","raws","node","filters","filterfy","children","options","value","path","SEG","name","pop","r","params","flag","args","replace","filter","Boolean","on","f","cb","prop","measure","nodeify","depth","push","includes","trim","com","m","v","o","parse","parser","nullable","extract","exec","MACRO","module","exports","require","as","data","fn","assign","Serialiser","ast","parent","get","set","bind","dig","result","every","n","child","yank","reduce","acc","curr","serialise","serialiser","validate","schemas","some","arg","Error","flat"],"mappings":"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","file":"yankee-doodle.min.js","sourceRoot":"..","sourcesContent":["class Parser {\n  constructor (schema) {\n    this.tokens = this\n      .strip(schema)\n      .split(this.reg.keys)\n      .map(i => this.tokenise(i))\n\n    while (this.tokens.length) {\n      this.next(this.tree)\n    }\n  }\n\n  nodeify () {\n    const [token, shift] = this.tokens.shift()\n    const [key, ...raws] = token.split(Parser.tokens.DIV)\n    const node = {\n      filters: this.filterfy(raws),\n      children: [],\n      options: {\n        ...Parser.options\n      },\n      key: {\n        value: key,\n        path: key.split(Parser.tokens.SEG),\n        name: key\n          .split(Parser.tokens.SEG)\n          .pop()\n      }\n    }\n\n    return {\n      shift,\n      node\n    }\n  }\n\n  filterfy (raws) {\n    return raws.map(r => {\n      const [key, params] = r.split(/(?=\\([\\w$_,]*\\)|$)/g)\n      const [name, flag] = key.split(this.reg.flags)\n      const args = params\n        ?.replace(/\\(([\\w$_,]*)\\)/g, '$1')\n        .split(',')\n        .filter(Boolean)\n\n      return {\n        name,\n        args: args ?? [],\n        flag: {\n          value: flag ?? null,\n          on: (f, cb) => flag === f && cb()\n        }\n      }\n    })\n  }\n\n  tokenise (key) {\n    const [prop, ...scopes] = key.split(this.reg.scopes)\n    const length = this.measure(scopes)\n\n    return prop === Parser.tokens.CLOSE\n      ? [null, length - 1]\n      : [prop, length]\n  }\n\n  next (children) {\n    const { node, shift } = this.nodeify(children)\n    const depth = this.depth\n\n    this.depth += shift\n\n    while (shift > 0 && this.depth > depth) {\n      this.next(node.children)\n    }\n\n    if (node.key) children.push(node)\n  }\n\n  measure (scopes) {\n    return +scopes.includes(Parser.tokens.OPEN) || -scopes.length || 0\n  }\n\n  strip (schema) {\n    const com = (m, v, o) => m === '\\n' && v[o + 1] !== Parser.tokens.CLOSE\n\n    return schema\n      .trim()\n      .replace(/\\s+/g, (...args) => com(...args) ? ',' : '')\n  }\n\n  parse () {\n    return this.tree\n  }\n\n  reg = {\n    get keys () {\n      return new RegExp(`,(?![^\\(]*[$\\)])|(?<=${Parser.tokens.OPEN})`)\n    },\n    get scopes () {\n      const { CLOSE, OPEN } = Parser.tokens\n\n      return new RegExp(`(?=[${CLOSE}]+)|(?=${OPEN})`)\n    },\n    get flags () {\n      const joined = Object\n        .values(Parser.tokens.FLAGS)\n        .map(i => `\\\\${i}`)\n        .join('|')\n\n      return new RegExp(`(?=${joined})`)\n    }\n  }\n\n  depth = 0\n\n  tree = []\n\n  static options = {\n    nullable: false,\n    extract: false,\n    exec: null\n  }\n\n  static tokens = {\n    OPEN: ':{',\n    CLOSE: '}',\n    DIV: '|',\n    SEG: '.',\n    FLAGS: {\n      MACRO: '!'\n    }\n  }\n}\n\nfunction parse (schema) {\n  const parser = new Parser(schema)\n\n  return parser.parse()\n}\n\nmodule.exports = {\n  Parser,\n  parse,\n  tokens: Parser.tokens,\n  flags: Parser.tokens.FLAGS\n}\n","const { flags } = require('./parse')\n\nmodule.exports = {\n  as ({ node, args: [name] }) {\n    node.key.name = name\n  },\n  nullable ({ node, flag }) {\n    node.options.nullable = true\n\n    flag.on(flags.MACRO, () => {\n      for (const { options } of node.children) {\n        options.nullable = true\n      }\n    })\n  },\n  extract ({ node }) {\n    node.options.extract = true\n  },\n  exec ({ node, data, args: [name, ...args] }) {\n    const fn = data[name] ?? (() => null)\n\n    node.options.exec = v => fn(v, ...args)\n  }\n}\n","const filters = require('./filters')\n\nconst { assign } = Object\n\nclass Serialiser {\n  constructor (data, ast) {\n    this.data = data\n    this.ast = ast\n  }\n\n  yank (node, data, parent) {\n    this.filter({\n      ast: this.ast,\n      node,\n      data,\n      parent\n    })\n\n    const value = this.get(data, node.key.path, node.options)\n    const set = this.set.bind(this, node, parent)\n\n    if (node.children.length) {\n      if (value || node.options.nullable) {\n        const children = this.dig(node, value)\n\n        if (node.options.extract) {\n          assign(parent, children)\n        } else {\n          set(children)\n        }\n      }\n    } else {\n      set(value)\n    }\n  }\n\n  dig (node, data) {\n    const result = {}\n    const nullable = node.children.every(n => !n.options.nullable)\n\n    if (!data && nullable) return null\n\n    for (const child of node.children) {\n      this.yank(child, data, result)\n    }\n\n    return result\n  }\n\n  filter (params) {\n    for (const { name, flag, args } of params.node.filters) {\n      const filter = filters[name]\n\n      filter({\n        ...params,\n        flag,\n        args\n      })\n    }\n  }\n\n  get (data, path, options) {\n    const value = path.reduce((acc, curr) => acc?.[curr], data)\n    const result = options.exec\n      ? options.exec(value)\n      : value\n\n    return options.nullable\n      ? result ?? null\n      : result\n  }\n\n  set (node, parent, value) {\n    parent[node.key.name] = value\n  }\n\n  serialise () {\n    for (const node of this.ast) {\n      this.yank(node, this.data, this.result)\n    }\n\n    return this.result\n  }\n\n  result = {}\n}\n\nfunction serialise (data, ast) {\n  const serialiser = new Serialiser(data, ast)\n\n  return serialiser.serialise()\n}\n\nmodule.exports = {\n  Serialiser,\n  serialise\n}\n","const { parse } = require('./parse')\nconst { serialise } = require('./serialise')\n\nfunction validate (schemas) {\n  if (schemas.some(arg => typeof arg !== 'string')) {\n    throw new Error('All schemas must be strings')\n  }\n}\n\nmodule.exports = function yank (data, ...args) {\n  if (!args.length) return data\n\n  validate(args)\n\n  const schema = args\n    .flat()\n    .join(',')\n\n  return serialise(data, parse(schema))\n}\n","module.exports = require('./src/yank')\n"]}