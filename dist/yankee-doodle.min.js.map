{"mappings":"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","sources":["./src/parser.js","./src/yank.js","./src/filters.js","./src/serialiser.js","./src/validator.js"],"sourcesContent":["const { assign } = Object\n\nclass Parser {\n  constructor (schema) {\n    this.tokens = this\n      .strip(schema)\n      .split(this.reg.keys)\n      .map(i => this.tokenise(i))\n  }\n\n  nodeify () {\n    const [token, shift] = this.tokens.shift()\n    const [key, ...raws] = token.split(Parser.tokens.DIV)\n    const node = {\n      filters: this.filterfy(raws),\n      children: [],\n      options: assign({}, Parser.options),\n      key: {\n        value: key,\n        path: key.split(Parser.tokens.SEG),\n        name: key\n          .split(Parser.tokens.SEG)\n          .pop()\n      }\n    }\n\n    return {\n      shift,\n      node\n    }\n  }\n\n  filterfy (raws) {\n    return raws.map(r => {\n      const [key, params] = r.split(/(?=\\([\\w$_,]*\\)|$)/g)\n      const [name, flag] = key.split(this.reg.flags)\n      const args = params\n        ?.replace(/\\(([\\w$_,]*)\\)/g, '$1')\n        .split(',')\n        .filter(Boolean)\n\n      return {\n        name,\n        args: args ?? [],\n        flag: {\n          value: flag ?? null,\n          on: (f, cb) => flag === f && cb()\n        }\n      }\n    })\n  }\n\n  tokenise (key) {\n    const [prop, ...scopes] = key.split(this.reg.scopes)\n    const length = this.measure(scopes)\n\n    return prop === Parser.tokens.CLOSE\n      ? [null, length - 1]\n      : [prop, length]\n  }\n\n  next (children) {\n    const { node, shift } = this.nodeify(children)\n    const depth = this.depth\n\n    this.depth += shift\n\n    while (shift > 0 && this.depth > depth) {\n      this.next(node.children)\n    }\n\n    if (node.key) children.push(node)\n  }\n\n  measure (scopes) {\n    return +scopes.includes(Parser.tokens.OPEN) || -scopes.length || 0\n  }\n\n  strip (schema) {\n    const com = (m, v, o) => m === '\\n' && v[o + 1] !== Parser.tokens.CLOSE\n\n    return schema\n      .trim()\n      .replace(/\\s+/g, (...args) => com(...args) ? ',' : '')\n  }\n\n  parse () {\n    while (this.tokens.length) {\n      this.next(this.tree)\n    }\n\n    return this.tree\n  }\n\n  reg = {\n    get keys () {\n      return new RegExp(`,(?![^\\(]*[$\\)])|(?<=${Parser.tokens.OPEN})`)\n    },\n    get scopes () {\n      const { CLOSE, OPEN } = Parser.tokens\n\n      return new RegExp(`(?=[${CLOSE}]+)|(?=${OPEN})`)\n    },\n    get flags () {\n      const joined = Object\n        .values(Parser.tokens.FLAGS)\n        .map(i => `\\\\${i}`)\n        .join('|')\n\n      return new RegExp(`(?=${joined})`)\n    }\n  }\n\n  depth = 0\n\n  tree = []\n\n  static options = {\n    nullable: false,\n    extract: false,\n    exec: null\n  }\n\n  static tokens = {\n    OPEN: ':{',\n    CLOSE: '}',\n    DIV: '|',\n    SEG: '.',\n    FLAGS: {\n      MACRO: '!'\n    }\n  }\n}\n\nmodule.exports = {\n  Parser,\n  tokens: Parser.tokens,\n  flags: Parser.tokens.FLAGS\n}\n","const { Parser } = require('./parser')\nconst { Serialiser } = require('./serialiser')\nconst { validate } = require('./validator')\n\nmodule.exports = function yank (data, ...args) {\n  if (!args.length) return data\n\n  validate(args)\n\n  const schema = args\n    .flat()\n    .join(',')\n  const parser = new Parser(schema)\n  const serialiser = new Serialiser(data, parser.parse())\n\n  return serialiser.serialise()\n}\n","const { flags } = require('./parser')\n\nmodule.exports = {\n  as ({ node, args: [name] }) {\n    node.key.name = name\n  },\n  nullable ({ node, flag }) {\n    node.options.nullable = true\n\n    flag.on(flags.MACRO, () => {\n      for (const { options } of node.children) {\n        options.nullable = true\n      }\n    })\n  },\n  extract ({ node }) {\n    node.options.extract = true\n  },\n  exec ({ node, data, args: [name, ...args] }) {\n    const fn = data[name] ?? (() => null)\n\n    node.options.exec = v => fn(v, ...args)\n  }\n}\n","const filters = require('./filters')\n\nconst { assign } = Object\n\nclass Serialiser {\n  constructor (data, ast) {\n    this.data = data\n    this.ast = ast\n  }\n\n  yank (node, data, parent) {\n    this.filter({\n      ast: this.ast,\n      node,\n      data,\n      parent\n    })\n\n    const value = this.get(data, node.key.path, node.options)\n    const set = this.set.bind(this, node, parent)\n\n    if (node.children.length) {\n      if (value || node.options.nullable) {\n        const children = this.dig(node, value)\n\n        if (node.options.extract) {\n          assign(parent, children)\n        } else {\n          set(children)\n        }\n      }\n    } else {\n      set(value)\n    }\n  }\n\n  dig (node, data) {\n    const result = {}\n    const nullable = node.children.every(n => !n.options.nullable)\n\n    if (!data && nullable) return null\n\n    for (const child of node.children) {\n      this.yank(child, data, result)\n    }\n\n    return result\n  }\n\n  filter (params) {\n    for (const { name, flag, args } of params.node.filters) {\n      const filter = filters[name]\n      const merged = assign(params, {\n        flag,\n        args\n      })\n\n      filter(merged)\n    }\n  }\n\n  get (data, path, options) {\n    const value = path.reduce((acc, curr) => acc?.[curr], data)\n    const result = options.exec\n      ? options.exec(value)\n      : value\n\n    return options.nullable\n      ? result ?? null\n      : result\n  }\n\n  set (node, parent, value) {\n    parent[node.key.name] = value\n  }\n\n  serialise () {\n    for (const node of this.ast) {\n      this.yank(node, this.data, this.result)\n    }\n\n    return this.result\n  }\n\n  result = {}\n}\n\nmodule.exports = {\n  Serialiser\n}\n","function validate (schemas) {\n  if (schemas.some(arg => typeof arg !== 'string')) {\n    throw new Error('All schemas must be strings')\n  }\n}\n\nmodule.exports = {\n  validate\n}\n"],"names":["$38bdd7c09594f76909d45ba83e72bfdc$var$assign","Object","assign","$38bdd7c09594f76909d45ba83e72bfdc$var$Parser","Parser","schema","RegExp","tokens","OPEN","CLOSE","joined","values","FLAGS","map","i","join","this","strip","split","reg","keys","_this","tokenise","shift","token","DIV","key","raws","node","filters","filterfy","children","options","value","path","SEG","name","pop","r","_r$split2","$38bdd7c09594f76909d45ba83e72bfdc$var$_slicedToArray","params","flags","_this2","flag","args","replace","filter","Boolean","on","f","cb","scopes","prop","length","measure","nodeify","depth","next","push","includes","com","m","v","o","trim","tree","nullable","extract","exec","MACRO","$106648ca3c52509c4c534b1a4d0ff701$var$Parser","$3572e7c27cd6a6a78c783cccef92024d$var$flags","$b5f9655fa81be7e50fa0cd2f53970017$var$filters","as","data","fn","$b5f9655fa81be7e50fa0cd2f53970017$var$assign","$106648ca3c52509c4c534b1a4d0ff701$var$Serialiser","Serialiser","$b5f9655fa81be7e50fa0cd2f53970017$var$Serialiser","ast","parent","get","set","bind","dig","result","every","n","child","yank","reduce","acc","curr","$106648ca3c52509c4c534b1a4d0ff701$var$validate","validate","schemas","some","arg","Error","flat","parser","serialiser","parse","serialise"],"version":3,"file":"yankee-doodle.min.js.map"}